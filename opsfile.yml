version: 3

tasks:
  
  cli:
    desc: cli
    env:
      IPYTHONDIR:
        sh: realpath .
    dir: cli
    cmds:
      - |
        set -a
        test -e $OPS_PWD/.env && source $OPS_PWD/.env
        test -e $OPS_PWD/tests/.env && source $OPS_PWD/tests/.env
        uv run ipython

  lesson:
    desc: lesson management
    silent: true
    dir: lesson
    cmds:
    - |
      if test -n "{{._name_}}"
      then
        if {{.__solution}}
        then uv run -- python lesson.py solution {{._name_}}
        else uv run -- python lesson.py lesson {{._name_}}
        fi
      else
        uv run -- python lesson.py list
      fi

  _config:
    desc: config
    dir: 
    cmds:
      - |
        cat <<EOF >mcpconfig.json
        {
          "mcpServers": {
            "{{._package_}}": {
              "command": "uv",
              "args": ["@modelcontextprotocol/server-everything"],
              "env": {
                "hello": "Hello MCP!"
              }
            },
        }
        EOF

  mcp:
    desc: mcp
    dir: mcproxy
    interactive: true
    silent: true
    env:
      PYTHONUBUFFERED: 1
    cmds:
      - uv python install 3.12
      - if ! test -d .venv ; then uv venv --python 3.12 ; fi
      - uv run python generator.py {{._package_}}
      - uv run --with mcp mcp run "$(realpath _svr/{{._package_}}.py)"

  mcptest:
    desc: "mcp test: test a generated mcp server"
    dir: mcproxy
    interactive: true
    silent: true
    cmds:
      - uv python install 3.12
      - if ! test -d .venv ; then uv venv --python 3.12 ; fi
      - uv run python generator.py {{._package_}} {{.__sample}}
      - echo "Generated " "$(realpath _svr/{{._package_}}.py)"
      - echo "Config    " "$(realpath _svr/{{._package_}}.json)"
      - |
        if ! {{.__norun}}
        then bun x @wong2/mcp-cli --config "_svr/{{._package_}}.json"
        fi

  new:
    desc: new tool
    dir: new
    interactive: true
    silent: true
    cmds:
      - |
        if test -n "{{.__tool}}"
        then TYPE="tool" ; NAME="{{.__tool}}"
        elif test -n "{{.__resource}}"
        then TYPE="resource" ; NAME="{{.__resource}}"
        elif test -n "{{.__prompt}}"
        then TYPE="prompt" ; NAME="{{.__prompt}}"
        elif test -n "{{.__clean}}"
        then TYPE="clean" ; NAME="{{.__clean}}"
        fi
        if test -n "$TYPE"
        then 
             export NEW_REDIS="{{.__redis}}"
             export NEW_POSTGRES="{{.__postgres}}"
             export NEW_MILVUS="{{.__milvus}}"
             export NEW_S3="{{.__s3}}"
             env | grep NEW_ 
             uv run python main.py "$TYPE" "{{._package_}}" "$NAME" "{{._description_}}"
        else echo "Please specify --tool, --resource or --prompt"
        fi


  pg:
    desc: postgres 
    
  etc:
    desc: miscellaneous 
