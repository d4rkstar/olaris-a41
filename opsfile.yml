version: 3

tasks:

  cli:
    silent: true
    desc: python repl
    cmds:
    - |
      cd $OPS_PWD
      set -a
      test -e $OPS_PWD/.env && source $OPS_PWD/.env
      python -m IPython
  
  chat:
    desc: chat with the AI (LLama3)
    silent: true
    cmds:
    - |
      set -a
      test -e $OPS_PWD/.env && source $OPS_PWD/.env
      args={{._args_}}
      set -- ${args[@]}
      test "$1" = "--" && shift
      python chat.py {{._action_}} "$@"

  new:
    desc: generate a new python action
    env:
       ACTION: "{{._action_}}"
       PACKAGE: "{{or ._package_ ._action_}}"
       DIR:  "packages/{{or ._package_ ._action_}}/{{._action_}}"
       FILE: "packages/{{or ._package_ ._action_}}/{{._action_}}/{{._action_}}.py"
    cmds:
    - test ! -e "$OPS_PWD/$FILE" || die "file already exists"
    - |
      mkdir -p $OPS_PWD/tests/$PACKAGE
      mkdir -p $OPS_PWD/$DIR
    - |
      cat <<EOF >$OPS_PWD/$FILE
      def $ACTION(args):
        return { "output": "$ACTION" }
      EOF
    - |
      cat <<EOF >$OPS_PWD/$DIR/__main__.py
      #--kind python:default
      #--web true
      import $ACTION
      def main(args):
        return { "body": $ACTION.$ACTION(args) }
      EOF
    - |
      cat <<EOF >$OPS_PWD/tests/$PACKAGE/test_${ACTION}.py
      import sys 
      sys.path.append("$DIR")
      import $ACTION
      
      def test_$ACTION():
          res = $ACTION.$ACTION({})
          assert res["output"] == "$ACTION"
      EOF
    - |
      cat <<EOF >$OPS_PWD/tests/$PACKAGE/test_${ACTION}_int.py
      import os, requests as req
      def test_$ACTION():
          url = os.environ.get("OPSDEV_HOST") + "/api/my/$PACKAGE/$ACTION"
          res = req.get(url).json()
          assert res.get("output") == "$ACTION"
      EOF
